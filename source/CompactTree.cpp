// Include Files
#include "rt_nonfinite.h"
#include "NTPredict.h"
#include "CompactTree.h"

// Function Definitions

//
// Arguments    : c_classreg_learning_coder_class *obj
// Return Type  : void
//
void CompactTree_CompactTree(c_classreg_learning_coder_class *obj)
{
  int i;
  static const double dv8[37] = { -1.0339029974965304, -0.06359581334835443,
    1.3444250583972925, -0.6289642067791934, 0.00021725836357303747,
    -0.61399516257115949, 0.13750117113220189, -1.4174150921327808,
    -1.0750830063323538, -0.55829224868999439, -2.637439223503705,
    0.24063473571029934, 0.62133198740392981, 0.0, 1.0835244888801445, 0.0,
    -0.51387881000213875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.25157207999029568,
    0.0, 0.0, -0.20268074006097464, 1.247607606137209, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0 };

  static const unsigned char uv0[37] = { 3U, 1U, 3U, 4U, 1U, 8U, 1U, 4U, 2U, 2U,
    146U, 1U, 9U, 0U, 4U, 0U, 1U, 0U, 0U, 0U, 0U, 0U, 0U, 1U, 0U, 0U, 1U, 2U, 0U,
    0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U };

  static const signed char iv0[74] = { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
    14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0, 0, 28, 29, 0, 0,
    30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 33, 0, 0, 0, 0, 34, 35, 36,
    37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

  static const double dv9[74] = { 0.5, 0.97382541761154484, 0.26285248417418272,
    0.988019583684584, 0.036402569593148443, 0.11790738258916628,
    0.96550595933628858, 0.99194325962968266, 0.5010141987829615,
    0.38356164383561653, 0.0069686411149827137, 0.45391438488238428,
    0.090662719673128458, 0.032482598607888678, 0.98468803663422755,
    0.99787517059097863, 0.888014527845041, 0.13807531380753096,
    0.84251968503937058, 0.023809523809523829, 0.87096774193548376, 1.0,
    0.0046565774155996253, 0.56757634827809478, 0.022797288971041604,
    0.065944195876527584, 0.40549828178695851, 0.51704545454545459,
    0.99267417038618155, 0.071729957805906963, 0.9510922725790697,
    0.019958706125258595, 0.73676376780778929, 0.018998272884283334,
    0.53344768439108348, 0.94350282485875725, 0.085714285714285493, 0.5,
    0.02617458238845511, 0.73714751582581728, 0.011980416315416064,
    0.96359743040685153, 0.88209261741083378, 0.034494040663711374,
    0.0080567403703173373, 0.49898580121703856, 0.61643835616438358,
    0.99303135888501737, 0.54608561511761566, 0.90933728032687144,
    0.9675174013921114, 0.015311963365772414, 0.0021248294090214243,
    0.11198547215495902, 0.86192468619246909, 0.15748031496062945,
    0.97619047619047616, 0.12903225806451618, 0.0, 0.99534342258440034,
    0.43242365172190522, 0.97720271102895828, 0.93405580412347244,
    0.59450171821304143, 0.48295454545454541, 0.0073258296138184031,
    0.928270042194093, 0.04890772742093033, 0.98004129387474148,
    0.26323623219221065, 0.98100172711571665, 0.46655231560891652,
    0.0564971751412428, 0.91428571428571448 };

  static const signed char iv1[19] = { 13, 15, 17, 18, 19, 20, 21, 22, 24, 25,
    28, 29, 30, 31, 32, 33, 34, 35, 36 };

  for (i = 0; i < 37; i++) {
    obj->CutPoint[i] = dv8[i];
    obj->CutVar[i] = uv0[i];
  }

  for (i = 0; i < 74; i++) {
    obj->Children[i] = iv0[i];
    obj->ClassProb[i] = dv9[i];
  }

  for (i = 0; i < 19; i++) {
    obj->CutPoint[iv1[i]] = rtNaN;
  }
}